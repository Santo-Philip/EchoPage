---
import ListArticle from "@/components/articles/ListArticle.astro";
import OptimizedImage from "@/components/home/OptimizedImage.astro";
import Layout from "@/layouts/Layout.astro";
import { supabase } from "@/lib/supabase";
import { Share, ThumbsDown, ThumbsUp } from "@lucide/astro";

const slug = Astro.params.slug;
const category = Astro.params.category;
const now = new Date().toISOString();

const { data: post, error } = await supabase
  .from("draft")
  .select("*")
  .eq("slug", slug)
  .eq("category", category)
  .eq("status", "public")
  .or(`schedule.lte.${now},schedule.is.null`)

if (error || post.length == null || post.length === 0) {
  return Astro.redirect("/404");
}

---

<Layout title={post[0]?.title || "Post"} keywords={post[0]?.keywords || post[0]?.slug} desc={post[0]?.desc || "Blog post"} img={post[0]?.thumb || undefined} >
  <div class="max-w-screen-md mx-auto min-h-screen space-y-6">
    {error && (
      <div class="p-4 border border-red-300 bg-red-50 text-red-700 rounded">
        <p class="font-medium">Error loading post</p>
        <p class="text-sm">{error}</p>
      </div>
    )}

    {post && (

      <OptimizedImage src={post[0]?.thumb}  alt="thumbnail" class="aspect-video md:rounded-lg object-cover" />
            
      <article id={post[0]?.id} class="prose prose-p:leading-relaxed prose-video:aspect-video prose-img:rounded-lg prose-headings:text-text-primary prose-p:text-text-primary prose-a:text-accent-hover prose-a:underline prose-strong:text-text-primary flex flex-col prose-lg max-w-none prose-blue">
        <div class="flex p-2 flex-wrap justify-between items-center">
        <p class="text-xs text-text-secondary">
                {post[0]?.schedule
                  ? new Date(post[0]?.schedule).toLocaleString(undefined, {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
      
                    })
                  : new Date(post[0]?.created_at).toLocaleString(undefined, {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
    
                    })}
              </p>
              <div class="flex justify-evenly gap-4">
                <button id="like" class="cursor-pointer hover:bg-text-primary hover:text-bg-primary rounded-full p-2"><ThumbsUp/></button>
                <button id="dislike" class="cursor-pointer hover:bg-text-primary hover:text-bg-primary rounded-full p-2"><ThumbsDown/></button>
                <button id="share" class="cursor-pointer hover:bg-text-primary hover:text-bg-primary rounded-full p-2"><Share/></button>

              </div>
              </div>
        <div class="mt-4 p-2" set:html={post[0]?.content_html}></div>
      </article>
    )}

    <ListArticle/>
  </div>
</Layout>

<script>
  const frame = document.querySelector("iframe");
  frame?.setAttribute("width", "100%");
  frame?.setAttribute("height", "100%");
  frame?.setAttribute("style", "aspect-ratio:16/9");
  
  const share = document.getElementById("share");
  const like = document.getElementById("like");
  const dislike = document.getElementById("dislike");


share?.addEventListener("click", async () => {
  if (navigator.share) {
      await navigator.share({
  text: `${document.title}\n${window.location.href}`
});
  } else {
    await navigator.clipboard.writeText(window.location.href);
    alert("Link copied to clipboard!");
  }
});
 
const article = document.querySelector("article") as HTMLElement;

const observer = new IntersectionObserver(
  (entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        fetch("/api/crud/data/views", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ post: article.id }),
        });
        observer.unobserve(entry.target);
      }
    });
  },
  {
    root: null,
    threshold: 1.0,
  }
);

observer.observe(article);


like?.addEventListener("click", async () => {
  const response = await fetch("/api/crud/data/likes", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ post: article.id, type: "like" }),
  });
  if (response.ok) {
    window.showToast("Liked!");
    window.location.reload();
  }
});

dislike?.addEventListener("click", async () => {
  const response = await fetch("/api/crud/data/likes", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ post: article.id, type: "dislike" }),
  });
  if (response.ok) {
    window.showToast("Disliked!");
    window.location.reload();
  }
});

document.addEventListener("DOMContentLoaded", async () => {
  const like = document.getElementById("like");
  const dislike = document.getElementById("dislike");

  try {
    const res = await fetch(`/api/crud/data/getLikes?id=${article.id}`);
    const data = await res.json();
    console.log(data.likes[0].type);

    if (data && data.likes[0].post === article.id) {
      if (data.likes[0].type === "like") {
        like?.classList.add("bg-text-primary", "text-bg-primary");
        like?.classList.remove("text-text-secondary");
      } else if (data.likes[0].type === "dislike") {
        dislike?.classList.add("bg-text-primary", "text-bg-primary");
        dislike?.classList.remove("text-text-secondary");
      }
    }
  } catch (err) {
    console.error("Failed to fetch likes:", err);
  }
});


</script>