---
import FloatingInput from "@/components/FloatingInput.astro";
import FloatingTextArea from "@/components/FloatingTextArea.astro";
import Layout from "@/layouts/Layout.astro";
import { supabase } from "@/lib/supabase";
import {
  FileText,
  Book,
  Newspaper,
  PenTool,
  Type,
  Paperclip,
  Cpu,
  Code,
  Smartphone,
  Monitor,
  Database,
  Server,
  Camera,
  Film,
  Music,
  Heart,
  Coffee,
  Palette,
  Sun,
  Moon,
  Activity,
  HeartPulse,
  Droplet,
  CreditCard,
  TrendingUp,
  Briefcase,
  Globe,
  Award,
  Rocket,
  Zap,
  Star,
  Anchor,
  Bell,
  Gift,
  Cloud,
  CameraOff,
  BookOpen,
  Compass,
  Flag,
  MapPin,
  Headphones,
  Share2,
  Megaphone,
} from "@lucide/astro";
import type { AstroComponentFactory } from "astro/runtime/server/index.js";

const iconMap: Record<string, AstroComponentFactory> = {
  FileText,
  Book,
  Newspaper,
  PenTool,
  Type,
  Paperclip,
  Cpu,
  Code,
  Smartphone,
  Monitor,
  Database,
  Server,
  Camera,
  Film,
  Music,
  Heart,
  Coffee,
  Palette,
  Sun,
  Moon,
  Activity,
  HeartPulse,
  Droplet,
  CreditCard,
  TrendingUp,
  Briefcase,
  Globe,
  Award,
  Rocket,
  Zap,
  Star,
  Anchor,
  Bell,
  Gift,
  Cloud,
  CameraOff,
  BookOpen,
  Compass,
  Flag,
  MapPin,
  Headphones,
  Share2,
  Megaphone,
};

const blogIcons = [
  "FileText",
  "Book",
  "Newspaper",
  "PenTool",
  "Type",
  "Paperclip",
  "Cpu",
  "Code",
  "Smartphone",
  "Monitor",
  "Database",
  "Server",
  "Camera",
  "Film",
  "Music",
  "Heart",
  "Coffee",
  "Palette",
  "Sun",
  "Moon",
  "Activity",
  "HeartPulse",
  "Droplet",
  "CreditCard",
  "TrendingUp",
  "Briefcase",
  "Globe",
  "Award",
  "Rocket",
  "Zap",
  "Star",
  "Anchor",
  "Bell",
  "Gift",
  "Cloud",
  "CameraOff",
  "BookOpen",
  "Compass",
  "Flag",
  "MapPin",
  "Headphones",
  "Share2",
  "Megaphone",
];

const { data: userData, error: userError } = await supabase.auth.getUser();
if (userError || !userData.user?.id) {
  return Astro.redirect("/");
}

const adminEmail = import.meta.env.EMAIL;
if (userData.user.email !== adminEmail) {
  return Astro.redirect("/");
}

const { data: categories, error: categoriesError } = await supabase
  .from("categories")
  .select("*")
  .order("name", { ascending: true });

---

<Layout title="Manage Categories" desc="Manage blog categories">
  <section class="max-w-screen-md mx-auto overflow-hidden overflow-x-hidden p-2">
    <h1>Manage Categories</h1>
    <p class="text-sm text-text-secondary">Manage blog categories here.</p>
    <form action="/api/crud/category/create" method="post" id="category-form" class="space-y-4">
      <FloatingInput label="Category" id="category" name="category" required />
      <FloatingTextArea rows="5" label="Description" id="desc" name="desc" required />
      <div class="icon-picker">
        <label class="block text-sm font-medium text-text-secondary">Select Icon</label>
        <div class="icons-grid grid grid-cols-4 md:grid-cols-6 gap-2 overflow-y-auto p-2 rounded">
          {blogIcons.map((name) => {
            const Icon = iconMap[name];
            return (
              <button
                type="button"
                class={`icon-btn p-2 rounded hover:bg-gray-200 flex flex-col items-center justify-center gap-1`}
                data-icon={name}
                aria-label={name}
              >
                <Icon class="w-6 h-6 text-gray-700" />
                <span class="text-sm text-text-muted">{name}</span>
              </button>
            );
          })}
        </div>
        <input type="hidden" id="selected-icon" name="icon" />
      </div>

      <button
        type="submit"
        class=" py-2 bg-bg-primary text-text-primary border border-accent-hover hover:bg-accent-primary hover:text-text-primary rounded-full px-10 "
      >
        Create Category
      </button>
    </form>
    {categories && categories.length > 0 && (
      <div class="mt-8">
        <h2 class="text-lg font-semibold">Existing Categories</h2>
        <ul class="space-y-2">
          {categories.map((category) => (
            <li class="flex items-center gap-2">
              {category.icon && iconMap[category.icon] && (() => {
                const Icon = iconMap[category.icon];
                return <Icon class="w-5 h-5 text-gray-700" />;
              })()}
              <span>{category.name}</span>
              <span class="text-sm text-text-secondary">({category.desc})</span>
            </li>
          ))}
        </ul>
      </div>
    )}
  </section>

  <style>
    .icon-btn.selected {
      background-color: #dbeafe;
      border: 1px solid #3b82f6;
    }
    .icons-grid {
      scrollbar-width: thin;
      scrollbar-color: #cbd5e1 #f1f5f9;
    }
    .icons-grid::-webkit-scrollbar {
      width: 8px;
    }
    .icons-grid::-webkit-scrollbar-track {
      background: #f1f5f9;
    }
    .icons-grid::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 4px;
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const selectedIconInput = document.getElementById("selected-icon") as HTMLInputElement;
      const iconButtons = document.querySelectorAll(".icon-btn") as NodeListOf<HTMLButtonElement>;

      iconButtons.forEach((button) => {
        button.addEventListener("click", () => {
          iconButtons.forEach((btn) => btn.classList.remove("selected"));
          button.classList.add("selected");
          selectedIconInput.value = button.dataset.icon || '';
        });
      });
     
    });
  </script>
</Layout>