---
import FloatingInput from "@/components/FloatingInput.astro";
import SeoPreview from "@/components/searchPreview";

import ThumbnailUploader from "@/components/ThumbnailUploader";
import Layout from "@/layouts/Layout.astro";
import { supabase } from "@/lib/supabase";

const id = Astro.url.searchParams.get("id");
const user = await supabase.auth.getUser();
const userId = user.data.user?.id;
const admin = import.meta.env.EMAIL;
const email = user.data.user?.email;

if (!userId) {
  return Astro.redirect("/");
}

if (!id) {
  return Astro.redirect("/");
}

const { data, error } = await supabase.from("draft").select("*").eq("id", id);
if (!data || data.length === 0) {
  return Astro.redirect("/editor");
}

if (userId !== data[0].author) {
  return Astro.redirect("/");
}

const domain = Astro.url.origin;
---

<Layout
  title={data[0].title || "Untitled"}
  desc={data[0].desc || "No description"}
>
  <div class="max-w-screen-md mx-auto overflow-hidden overflow-x-hidden p-2">
    <h1 class="text-2xl md:text-4xl font-bold">Manage Page</h1>
    <p class="text-sm text-text-secondary">
      From here you can manage and update your draft.
    </p>
    <ThumbnailUploader client:only initialUrl={data[0].thumb} />
    <SeoPreview
      domain={domain}
      title={data[0].title || "Untitled"}
      description={data[0].desc || "No description"}
      slug={data[0].slug}
      thumbnail={data[0].thumb}
      client:load
    />
    <div class="flex flex-col gap-4 mt-4">
      <div>
        <FloatingInput value={data[0].title} label="Title" id="title" />
      </div>
      <p class="text-accent-primary text-sm p-2">Description</p>
      <div
        contenteditable="true"
        id="desc"
        class="w-full min-h-12 outline-none border-b border-text-muted p-2"
      >
        {data[0].desc}
      </div>
      <p class="text-accent-primary text-sm p-2">Tags</p>
      <div
        id="tags"
        contenteditable="true"
        class="w-full min-h-12 outline-none border-b border-text-muted p-2"
      >
        {data[0].tags}
      </div>
      <p class="text-accent-primary text-sm p-2">Keywords</p>
      <div
        id="keywords"
        contenteditable="true"
        class="w-full min-h-12 outline-none border-b border-text-muted p-2"
      >
        {data[0].keywords}
      </div>
      <p class="text-accent-primary text-sm p-2">Category</p>
      <div
        id="category"
        contenteditable="true"
        class="w-full min-h-12 outline-none border-b border-text-muted p-2"
      >
        {data[0].category}
      </div>
    </div>
    {
      email === admin && (
        <div class="flex w-full justify-end">
          <button class="bg-accent-primary  hover:bg-accent-hover cursor-pointer m-2 text-text-primary mt-4 px-8 py-2 rounded-xl">
            Publish
          </button>
        </div>
      )
    }
    <div class="flex justify-end w-full">
      <a
        href=`/draft/${id}`
        class="px-10 border m-2 border-accent-primary rounded-xl py-2"
        >Save</a
      >
    </div>
    <p class="border-left font-bold border-l-4 w-full p-2 mt-4 bg-red-500/30 border-red-500">
Danger Zone
    </p>
    <div class="flex w-full mt-4 items-center justify-between">
<p>Archive this page</p>
<button class="px-12 py-2 bg-red-500 text-white rounded-xl">
  Yes
</button>
    </div>
  </div>
</Layout>
<script>
  import autoSave from "@/lib/blogs/autosave";
  import { getSearchParam } from "@/lib/blogs/getParams";

  const title = document.getElementById("title") as HTMLInputElement;
  const desc = document.getElementById("desc") as HTMLDivElement;
  const tags = document.getElementById("tags") as HTMLDivElement;
  const keywords = document.getElementById("keywords") as HTMLDivElement;
  const category = document.getElementById("category") as HTMLDivElement;
  const id = getSearchParam("id");

  title.addEventListener("input", () => {
    const text = title.value;
    autoSave(id, { title: text });
  });

  desc.addEventListener("input", () => {
    const text = desc.innerText;
    autoSave(id, { desc: text });
  });

  tags.addEventListener("input", () => {
    const text = tags.innerText;
    autoSave(id, { tags: [text] });
  });

  keywords.addEventListener("input", () => {
    const text = keywords.innerText;
    autoSave(id, { keywords: [text] });
  });

  category.addEventListener("input", () => {
    const text = category.innerText;
    autoSave(id, { category: text });
  });
</script>
